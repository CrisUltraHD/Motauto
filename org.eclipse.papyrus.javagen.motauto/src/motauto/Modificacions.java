// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package motauto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * 
 */
public class Modificacions {
	
	public static Scanner lector = new Scanner(System.in);
	
	public static void altaCliente() {
		String dni, nombre, apellidos, correo, direccion;
		int telefono;
		System.out.println("Dni cliente: ");
		dni = Utiles.demanarString();
		System.out.println("Nombre cliente: ");
		nombre = Utiles.demanarString();
		System.out.println("Apellidos cliente: ");
		apellidos = Utiles.demanarString();
		System.out.println("Correo cliente: ");
		correo = Utiles.demanarString();
		System.out.println("Telefono cliente: ");
		telefono = Utiles.demanarNum();
		System.out.println("Direccion cliente: ");
		direccion = Utiles.demanarString();
		
		Cliente cliente = new Cliente(dni, nombre, apellidos, correo, telefono, direccion);
	}

	/**
	 * 
	 * @param ObjectArticulo 
	 */
	public static void altaArticulo() {
		String codigo, nombre;
		float precio, iva;
		Database db = new Database();
		
		System.out.println("Codigo Articulo: ");
		codigo = Utiles.demanarString();
		
		boolean existe = Comprovaciones.comprovarCodigoArticulo(codigo);
		if(existe) 
		{
			System.out.println("CODIGO ARTICULO YA EXISTE");
		}
		else if(!existe) 
		{
			System.out.println("Nombre Articulo: ");
			nombre = Utiles.demanarString();
			System.out.println("Precio Articulo: ");
			precio = Utiles.demanarNumFloat();
			System.out.println("Iva Articulo: ");
			iva = Utiles.demanarNumFloat();
			
			Articulos articulo = new Articulos(codigo, nombre, precio, iva);
			articulo.insertArticulo(db);
		}	
	}
		 

	/**
	 * 
	 * @param ObjecteVehicle 
	 */
	public static void altaVehiculo() {
		Database db = new Database();
		
		String matricula, dni, color, tipo;
		System.out.println("Matricula Vehiculo: ");
		matricula = Utiles.demanarString(); 
		
		System.out.println("Dni client: ");
		dni = Utiles.demanarString();
		Comprovaciones.comprovarDni(dni, db);
		// Buscara en la base de datos que cliente corresponde a este dni
		// Este cliente sera el que se contruia i se pase al constructor de la clase Vehiculo.
		Cliente cliente =  new Cliente();
		System.out.println("Color Vehiculo: ");
		color = Utiles.demanarString();
		System.out.println("Tipo Vehiculo: ");
		tipo = Utiles.demanarString();
		Vehiculo vehiculo = new Vehiculo(matricula,  color,  tipo, cliente);
	}

	/**
	 * 
	 * @param dni 
	 */
	public static void borrarCliente() {
		
	}

	/**
	 * 
	 * @param codigoArticulo 
	 */
	public static void borrarArticulo(String codigoArticulo) {
	}

	/**
	 * 
	 * @param matricula 
	 */
	public static void borrarVehiculo() {
		
		String matricula;
		
		System.out.println("Matricula Vehiculo: ");
		matricula = Utiles.demanarString();




		
		

	}

	/*
	 * 
	 * 
	 * 
	 */
	public static void CrearFactura()
	{
		Database db = new Database();
		
		boolean fiArticles = false;
		float totalFiles = 0;
		ArrayList<FacturaFiles> filas = new ArrayList<FacturaFiles>();
		
		Comprovaciones.mostrarClientes(db);
		
		System.out.println("DNI Cliente: ");
		String dni = lector.nextLine();
		
		if(!Comprovaciones.comprovarDni(dni, db)) 
		{
			Modificacions.altaCliente();
		}
		
		Comprovaciones.mostrarClientes(db);

		System.out.println("DNI Cliente: ");
		dni = lector.nextLine();
		
		Cliente cliente = Comprovaciones.consultaClient(dni, db);
		//*******************************************************
		
		//SECCION VEHICULO
		Comprovaciones.mostrarVehiculos(db);
		System.out.println("Matricula Cliente: ");
		String matricula = lector.nextLine();
		
		if(!Comprovaciones.comprovarMatricula(matricula, db)); 
		{
			Modificacions.altaVehiculo();
		}
		
		Comprovaciones.mostrarVehiculos(db);

		System.out.println("Matricula Cliente: ");
		matricula = lector.nextLine();
		
		Vehiculo vehiculo = Comprovaciones.consultaVehiculo(matricula, db);
		//*******************************************************

		FacturaHeader fh = new FacturaHeader();		
		
		System.out.println("ARTICULOS A AÑADIR: ");
	
		while(!fiArticles) 
		{
			System.out.println("ARTICULOS A AÑADIR: ");
			Utiles.ImprimirArticulos(db);
			System.out.println("CODIGO ARTICULO: \n Inserta 999 para salir");
			String codigo = lector.nextLine();
			
			if(codigo.equalsIgnoreCase("999")) 
			{
				fiArticles = true;
			}
			
			//SI EL CODIGO ARTICULO NO EXISTE
			if(!Comprovaciones.comprovarCodigoArticulo(codigo)) 
			{
				//GUARDA SI O NO
				boolean creacio = Utiles.siNo("El articulo no existe quieres crearlo? Si No");
				
				if(creacio) 
				{
					Modificacions.altaArticulo();	
				}				
			}
			else if(Comprovaciones.comprovarCodigoArticulo(codigo)) 
			{
				//DEVUELVE UN OBJETO ARTICULO
				Articulos articulo = Comprovaciones.consultaArticulo(codigo, db);

				System.out.println("Cantidad: ");
				int cantidad = Utiles.demanarNum();
				
				System.out.println("Descuento: ");
				float descuento = Utiles.demanarNum();
				
				float total = (articulo.getPrecio() * cantidad) + (articulo.getPrecio() * articulo.getIva());
				totalFiles += total;
				
				//GENEREM UNA FILA I LA GUARDEM AL ARRAYLIST
				FacturaFiles ff = new FacturaFiles(cantidad, articulo, fh, descuento, total);
				filas.add(ff);
				
				//INSERTEM A LA BBDD LA FILA
				boolean creat = ff.insertFacturaFila(db);
				if(creat) 
				{
					System.out.println("Insert Correcto");
				}
				else 
				{
					System.out.println("Insert Incorrecto");
				}
			}	
		}
		
		//ACABAT DE ESCOLLIR ARTICLES
		System.out.println("Estado Factura: ");
		int estado = Utiles.menu(3);
				
		System.out.println("Inserta IVA Factura");
		float ivaFactura = Utiles.demanarNumFloat();

		System.out.println("Descuento Factura: ");
		float descuentoFactura = Utiles.demanarNumFloat();
		
		System.out.println("Observaciones: ");
		String observaciones = lector.nextLine();
		
		System.out.println("Forma De Pago: ");
		String formaPago = lector.nextLine();
		
		float totalBaseImponible = totalFiles;
		float precioIva = totalBaseImponible * ivaFactura;
		float totalFacturaConIva = totalFiles + (totalFiles * ivaFactura);

		fh = new FacturaHeader(0,"",estado,totalBaseImponible,cliente,vehiculo,filas,descuentoFactura,precioIva,totalFacturaConIva,observaciones,LocalDate.now(),formaPago);
		
		//MODIFICA EL OBJETO HEADER YA QUE ESTAVA VACIO
		for(FacturaFiles f : filas) 
		{
			f.setFacturasHeader(fh);
		}
		
		//HACE LOS INSERT DEL HEADER Y LAS FILAS
		fh.insertFacturaHeader(db);
		
		for(FacturaFiles f : filas) 
		{
			f.insertFacturaFila(db);
		}
	}
	

	/**
	 * 
	 * @param FacturaHeader 
	 * @param FacturaFiles 
	 */
	public static void ModificarFactura() 
	{
		Database db = new Database();

		if(Utiles.siNo("Quieres Mostrar Todos los numeros de Facturas? ")) 
		{
			Comprovaciones.mostrarFacturas();
			
			System.out.println("Inserta el codigo factura\n999 Per sortir: ");
			String codigo = Utiles.demanarString();
			
			boolean existeix = Comprovaciones.comprovarNumeroFactura(codigo, db);
			
			//SI NO EXISTE VUELVE AL MAIN
			if(!existeix) 
			{
				System.out.println("Num Factura No Existe: ");
				MotAuto.main(null);
			}
			
			//OPCIONES
			System.out.println("1 - Modificar Header");	
			System.out.println("2 - Modificar Filas");
			int opcion = Utiles.menu(2);
			
			
			switch(opcion) 
			{
			case 1:
				FacturaHeader headerFactura;
				
				System.out.println("1 - Modificar Cif Empresa");
				System.out.println("2 - Modificar Estado");
				System.out.println("3 - Modificar Forma de Pago");
				System.out.println("4 - Modificar Observaciones");
				int opcion2 = Utiles.menu(4);
				
				switch(opcion2) 
				{
				case 1:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nuevo CIF: ");
					String cif = Utiles.demanarString();
					
					headerFactura.setCifEmpresa(cif);
					headerFactura.modificarFactura(db);
					break;
					
				case 2:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nuevo Estado: ");
					int estado = Utiles.menu(3);
					headerFactura.setEstado(estado);;
					headerFactura.modificarFactura(db);
					break;
					
				case 3:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nueva Forma De Pago: ");
					String formaPago = Utiles.demanarString();
					headerFactura.setForma_pago(formaPago);;
					headerFactura.modificarFactura(db);
					break;
					
				case 4:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nueva Observacion: ");
					String observacion = Utiles.demanarString();
					headerFactura.setObservaciones(observacion);;
					headerFactura.modificarFactura(db);
					break;
				}
				break;
				
				/***********************************************************************/
				//QUE QUEREMOS CAMBIAR DE FILAS
			case 2: 
				FacturaFiles filesFactura;
				
				System.out.println("1 - Modificar Cif Empresa");
				System.out.println("2 - Modificar Estado");
				System.out.println("3 - Modificar Forma de Pago");
				System.out.println("4 - Modificar Observaciones");
				int opcion3 = Utiles.menu(4);
				
				switch(opcion3) 
				{
				case 1:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nuevo CIF: ");
					String cif = Utiles.demanarString();
					
					headerFactura.setCifEmpresa(cif);
					headerFactura.modificarFactura(db);
					break;
					
				case 2:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nuevo Estado: ");
					int estado = Utiles.menu(3);
					headerFactura.setEstado(estado);;
					headerFactura.modificarFactura(db);
					break;
					
				case 3:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nueva Forma De Pago: ");
					String formaPago = Utiles.demanarString();
					headerFactura.setForma_pago(formaPago);;
					headerFactura.modificarFactura(db);
					break;
					
				case 4:
					headerFactura = Comprovaciones.consultaFacturaHeader(codigo, db);
					System.out.println("Inserta Nueva Observacion: ");
					String observacion = Utiles.demanarString();
					headerFactura.setObservaciones(observacion);;
					headerFactura.modificarFactura(db);
					break;
				}
				break;
			}
		}
	}


	/**
	 * 
	 * @param esborrat 
	 * @param numFactura 
	 */
	public static void borrarFactura(Database db) 
	{
		
	}

	/**
	 * 
	 * @param ObjecteVehicle 
	 * @return 
	 */
	public static void ModificarVehiculo(Database db) 
	{
		Vehiculo vehiculo= null;

				System.out.println("Menu:");
				boolean sortir2 = false;

				while (!sortir2) {
					// les tres opcions
					
					System.out.print("\n1: Modificar color ");
					System.out.print("\n2: Modificar Tipo vehiculo ");
					System.out.print("\n3: Sortir ");
					System.out.println("\nTria opcio: ");
					int menuGeneral1 = lector.nextInt();
					lector.nextLine();
					
					switch (menuGeneral1) {
					
					case 1:
					
					System.out.println("\nMatricula: ");
					String auxMatricula = lector.nextLine();
					Comprovaciones.comprovarMatricula(auxMatricula, db);
					//comproave
					System.out.println("\nColor nou: ");
					String auxColor = lector.nextLine();
					 vehiculo = Comprovaciones.consultaVehiculo(auxMatricula, db);
					vehiculo.setColor(auxColor);
					vehiculo.modificarVehiculo(db);
						break;
					case 2:
					System.out.println("\nMatricula: ");
					 auxMatricula = lector.nextLine();
					Comprovaciones.comprovarMatricula(auxMatricula, db);
					//comproave
					System.out.println("\n Tipo vehiculo nou: ");
					String auxtipus  = lector.nextLine();
					 vehiculo = Comprovaciones.consultaVehiculo(auxMatricula, db);
					vehiculo.setTipo_vehiculo(auxtipus);
					vehiculo.modificarVehiculo(db);
	
						break;


					case 3:
						// while en sortir true i sortim
						System.out.print("\nHas sortit de modificacions ");
						sortir2 = true;
						break;

					}
				}

	}


	/**
	 * 
	 * @param ObjecteClient 
	 */
	public static Object ModificarCliente() 
	{
		Cliente objecteClient;
		return objecteClient;
	}

	/**
	 * 
	 * @param ObjectArticulo 
	 */
	public static Object ModificarAriculo() 
	{
		Articulos objectArticulo;
		return objectArticulo;
	}
	
}